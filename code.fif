"Asm.fif" include

0x96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7 constant EMPTY_CELL_HASH

0x00000001 constant OP_CHANGE_KEY

85143  constant FN_SEQNO
71784  constant FN_LASTMSG
127202 constant FN_LASTKEY
78577  constant FN_THIRDKEY
91425  constant FN_PREVKEY
101803 constant FN_PREVMSG

33 constant ERR_SEQNO
34 constant ERR_EXP
35 constant ERR_SIG
36 constant ERR_REPLAY
37 constant ERR_UNAUTHORIZED
38 constant ERR_KEY_EXISTS

<{
	SETCP0

	DUP INC <{
		OVER
		512 INT LDSLICEX TUCK
		MYADDR
		NEWC STSLICE STSLICE ENDC
		HASHCU
		ROT 32 LDU 32 LDU PLDREF

		PUSHROOT
		CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT

		// s10 extmsg_signature
		// s9  extmsg_signed_hash
		// s8  extmsg_seqno
		// s7  extmsg_valid_until
		// s6  extmsg_msg
		// s5  seqno
		// s4  last_msg
		// s3  last_key
		// s2  third_key
		// s1  prev_key
		// s0  prev_msg

		s5 s8 s7 PUSH3
		NOW GEQ ERR_EXP THROWIFNOT
		EQUAL ERR_SEQNO THROWIFNOT

		<{
			<{
				DROP NULL 4 3 BLKPUSH s9 PUSH INC
			}> PUSHCONT SETEXITALT

			s9 s10 s1 PUSH3 CHKSIGNU <{
				5 0 REVERSE
				s9 s10 s1 PUSH3 CHKSIGNU IFRET
				s9 s10 s2 PUSH3 CHKSIGNU ERR_SIG THROWIFNOT
				s4 PUSH ISNULL <{ 5 0 REVERSE }> PUSHCONT IF
				s0 PUSH ISNULL <{ 2 1 REVERSE }> PUSHCONT IFJMP
				s0 PUSH HASHCU s7 PUSH HASHCU EQUAL <{ 5 0 REVERSE }> PUSHCONT IF
				s4 PUSH HASHCU s7 PUSH HASHCU EQUAL <{ 2 1 REVERSE }> PUSHCONT IFJMP
				RETALT
			}> PUSHCONT IFNOT

			s4 PUSH ISNULL <{
				s4 PUSH HASHCU s7 PUSH HASHCU EQUAL IFNOTRET
				s6 PUSH HASHCU EMPTY_CELL_HASH INT EQUAL IFRETALT
				s6 PUSH 3 INT SENDRAWMSG
				RETALT
			}> PUSHCONT IFNOT

			s0 PUSH ISNULL ERR_REPLAY THROWIFNOT
			s6 XCHG0
			s5 PUSH
		}>c CALLREF

		NEWC 32 STU STDICT 256 STU 256 STU 256 STU STDICT ENDC
		POPROOT
		ACCEPT
	}> PUSHCONT IFNOTJMP

	DUP <{
		s2 PUSH CTOS
		4 LDU SWAP 1 INT AND IFRET
		LDMSGADDR DROP MYADDR SDEQ ERR_UNAUTHORIZED THROWIFNOT

		// simple transfer if no op field or it is zero
		OVER 32 LDUQ IFNOTRET OVER IFNOTRET

		OVER OP_CHANGE_KEY INT EQUAL <{
			PUSHROOT CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT
			s6 PUSH 256 LDU 256 LDU ENDS

			// s7  seqno
			// s6  last_msg
			// s5  last_key
			// s4  third_key
			// s3  prev_key
			// s2  prev_msg
			// s1  intmsg_old_key
			// s0  intmsg_new_key

			s0 s3 PUSH2 EQUAL ERR_KEY_EXISTS THROWIF
			s0 s4 PUSH2 EQUAL ERR_KEY_EXISTS THROWIF
			s0 s5 PUSH2 EQUAL ERR_KEY_EXISTS THROWIF

			s1 s3 PUSH2 EQUAL <{ s3 XCHG0 }> PUSHCONT IF
			s1 s4 PUSH2 EQUAL <{ s4 XCHG0 }> PUSHCONT IF
			s1 s5 PUSH2 EQUAL <{ s5 XCHG0 }> PUSHCONT IF

			2DROP 6 0 REVERSE
			NEWC 32 STU STDICT 256 STU 256 STU 256 STU STDICT ENDC
			POPROOT
		}> PUSHCONT IFJMP
	}> PUSHCONT IFNOTJMP

	DUP FN_SEQNO INT EQUAL <{
		PUSHROOT CTOS 32 PLDU
		2 0 REVERSE 1 BLKDROP
	}> PUSHCONT IFJMP

	DUP FN_LASTMSG INT EQUAL <{
		PUSHROOT CTOS 32 LDU PLDDICT
		3 0 REVERSE 2 BLKDROP
	}> PUSHCONT IFJMP

	DUP FN_LASTKEY INT EQUAL <{
		PUSHROOT CTOS 32 LDU LDDICT 256 PLDU
		4 0 REVERSE 3 BLKDROP
	}> PUSHCONT IFJMP

	DUP FN_THIRDKEY INT EQUAL <{
		PUSHROOT CTOS 32 LDU LDDICT 256 LDU 256 PLDU
		5 0 REVERSE 4 BLKDROP
	}> PUSHCONT IFJMP

	DUP FN_PREVKEY INT EQUAL <{
		PUSHROOT CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 PLDU
		6 0 REVERSE 5 BLKDROP
	}> PUSHCONT IFJMP

	DUP FN_PREVMSG INT EQUAL <{
		PUSHROOT CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT
		7 0 REVERSE 6 BLKDROP
	}> PUSHCONT IFJMP
}>c
