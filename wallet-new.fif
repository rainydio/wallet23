#!/bin/env -S fift -s

"Asm.fif" include
"TonUtil.fif" include
"GetOpt.fif" include

0                constant nonce
"key1.pk"        constant key1_filename
"key2.pk"        constant key2_filename
"key3.pk"        constant key3_filename
"wallet-new.boc" constant boc_filename
"wallet.addr"    constant addr_filename

$# 1 < {
	."fift -s " $0 type ." <workchain id> [options]" cr
	."  create new wallet in workchain <workchain id>" cr
	cr
	."options:" cr
	."  --nonce=0              nonce added to stateinit randomizing contract address" cr
	."  --key1=key1.pk         first key filename" cr
	."  --key2=key2.pk         second key filename" cr
	."  --key3=key3.pk         third key filename" cr
	."  --boc=wallet-new.boc   stateinit message filename" cr
	."  --addr=wallet.addr     addr filename" cr

	100 halt
} if

$1 parse-int constant workchain_id
begin-options
	"--nonce" { parse-int =: nonce         } long-option-arg
	"--key1"  {           =: key1_filename } long-option-arg
	"--key2"  {           =: key2_filename } long-option-arg
	"--key3"  {           =: key3_filename } long-option-arg
	"--boc"   {           =: boc_filename  } long-option-arg
	"--addr"  {           =: addr_filename } long-option-arg
parse-options

key1_filename load-generate-keypair drop constant key1pub
key2_filename load-generate-keypair drop constant key2pub
key3_filename load-generate-keypair drop constant key3pub

<{
	SETCP0 ACCEPT
	nonce INT
	"code.fif" include PUSHREF SETCODE
}>c constant envelope

<b
	1 32 u,
	b{0} s,
	key2pub B,
	key3pub B,
	key1pub B,
	b{0} s,
b> constant data

<b
	b{0011} s,
	envelope ref,
	data ref,
	dictnew dict,
b> constant stateinit

workchain_id stateinit hashu 2constant contract_address

<b
	b{1000100} s,
	contract_address addr,
	b{000010} s,
	stateinit <s s,
	b{0} s,
b> constant stateinit_msg

contract_address addr_filename save-address-verbose
stateinit_msg 2 boc+>B dup boc_filename B>file

cr
contract_address 7 smca>$ type cr
