"Asm.fif" include
"TonUtil.fif" include

{
	rot = -rot = and
} : addr=

{
	$>B crc16 0x10000 or
} : $>id

{
	dict,
} : nullref,

{
	1 u@+ swap { ref@+ swap } { null swap } cond
} : nullref@+

{
	nullref@+ drop
} : nullref@

{
	2dup <s s-fits? {
		swap false 1 u, swap <s s,
	} {
		swap true 1 u, swap ref,
	} cond
} : body,

{
	1 u@+ swap { ref@+ swap } { s>c } cond
} : body@

{
	"" swap {
		dup sbits 8 /c $@+ -rot $+ swap
		dup srefs 0 = {
			ref@ <s
		} ifnot
		dup empty?
	} until
	drop
} : comment@

{
	<s sbits 0 <>
} : req@msg?

{
	<s sbits 0 =
} : req@cancellation?

{
	<s srefs 1 =
} : cancellation@comment?

{
	<s ref@ <s comment@
} : cancellation@comment

{
	<s 2 u@+ nip 1 i@
} : msg@bounceable

{
	<s 9 u@+ nip 8 i@+ 256 u@
} : msg@addr

{
	dup msg@addr rot msg@bounceable { 6 } { 7 } cond smca>$
	msg@bounceable { " (bounceable)" $+ } { " (non-bounceable)" $+ } cond
} : msg@addr>$

{
	<s 17 u@+ nip 256 u@+ nip Gram@
} : msg@amount

{
	<s 17 u@+ nip 256 u@+ nip Gram@+ nip 106 u@+ nip body@
} : msg@body

{
	<s 32 u@
} : body@op

{
	body@op 0 =
} : body@simple_transfer?

{
	<s 32 u@+ swap 0 = { comment@ } { null } cond
} : simple_transfer@comment

{
	body@op 1 =
} : body@replace_key?

{
	<s 32 u@+ nip 32 B@
} : replace_key@old_key

{
	<s 32 u@+ nip 32 B@+ nip 32 B@
} : replace_key@new_key

{
	<s 32 u@
} : data@seqno

{
	<s 32 u@+ nip nullref@+ nip 32 B@+ 32 B@+ 32 B@

	2dup Bcmp -1 = { swap } if rot
	2dup Bcmp -1 = { swap } if -rot
	2dup Bcmp  1 = { swap } if
} : data@keys

{
	<s 32 u@+ nip nullref@+ 32 B@+ 32 B@+ 32 B@+ nullref@

	5 pick 2 pick B= {
		0 pick
	} {
		5 pick 4 pick B= {
			4 pick
		} {
			null
		} cond
	} cond

	6 -roll { drop } 6 times
} : data@my_request

{
	<s 32 u@+ nip nullref@+ 32 B@+ 32 B@+ 32 B@+ nullref@

	5 pick 2 pick B= {
		4 pick
	} {
		5 pick 4 pick B= {
			0 pick
		} {
			0 pick null? {
				4 pick
			} {
				0 pick
			} cond
		} cond
	} cond

	6 -roll { drop } 6 times
} : data@other_request1

{
	<s 32 u@+ nip nullref@+ 32 B@+ 32 B@+ 32 B@+ nullref@

	5 pick 2 pick B= {
		4 pick null? { null } { 3 pick } cond
	} {
		5 pick 4 pick B= {
			0 pick null? { null } { 1 pick } cond
		} {
			0 pick null? {
				4 pick null? { null } { 3 pick } cond
			} {
				0 pick null? { null } { 1 pick } cond
			} cond
		} cond
	} cond

	6 -roll { drop } 6 times
} : data@other_request1_key

{
	<s 32 u@+ nip nullref@+ 32 B@+ 32 B@+ 32 B@+ nullref@

	5 pick 3 pick B= {
		4 pick
	} {
		null
	} cond

	6 -roll { drop } 6 times
} : data@other_request2

{
	<s 32 u@+ nip nullref@+ 32 B@+ 32 B@+ 32 B@+ nullref@

	5 pick 3 pick B= {
		4 pick null? { null } { 3 pick } cond
	} {
		null
	} cond

	6 -roll { drop } 6 times
} : data@other_request2_key
