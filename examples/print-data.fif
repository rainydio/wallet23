#!/bin/env -S fift -s

"TonUtil.fif" include
"../lib.fif" include

$# 3 < {
	."fift -s " $0 type ." <contract address> <data boc file> <key file> [<selector> ...]" cr
	."  print information stored in contract data cell" cr
	cr
	."selectors:" cr
	."  seqno               seqno" cr
	."  keys                three public keys in ascending order" cr
	."  my_request          description of request made by key stored in <key file>" cr
	."  other_request1      description of first request made by other key" cr
	."  other_request1_key  key that made first request" cr
	."  other_request2      description of second request made by other key" cr
	."  other_request2_key  key that made second request" cr
	cr
	."contract data cell has to be downloaded first:" cr
	."    lite-client -c 'last' -c 'saveaccountdata <data boc file> <contract address>'" cr

	100 halt
} if

$1 false parse-load-address drop
2constant contract_address

$2 file>B B>boc
constant contract_data

$3 file>B priv>pub
constant public_key

{
	dup null? { drop } {
		256 B>u@ 64 (0x.) type
	} cond
} : .key

{
	dup null? { drop } {
		dup cancellation?@req {
			."cancellation" <s dup empty? { drop } {
				." | " ref@ <s comment@ type
			} cond
		} {
			dup addr@msg contract_address addr= {
				body@msg
				dup op@body 1 = {
					."replace key | " <s 32 u@+ nip 32 B@+ 32 B@ swap .key ." => " .key
				} {
					."self | " op@body 16 (0x.) type
				} cond
			} {
				dup amount@msg .GR
				dup addr@msg>$ type space
				dup bounceable@msg { ."(bounceable) " } { ."(non-bounceable) " } cond

				body@msg
				dup simple_transfer?@body {
					."| simple transfer | " simple_transfer_comment@body type
				} {
					."| " op@body 16 (0x.) type
				} cond
			} cond
		} cond
	} cond
} : .req


4 {
	dup $() "seqno" $= {
		contract_data seqno@data (.) type
	} if

	dup $() "keys" $= {
		contract_data keys@data .key space .key space .key
	} if

	dup $() "my_request" $= {
		public_key contract_data my_request@data .req
	} if

	dup $() "other_request1" $= {
		public_key contract_data other_request1@data .req
	} if

	dup $() "other_request1_key" $= {
		public_key contract_data other_request1_key@data .key
	} if

	dup $() "other_request2" $= {
		public_key contract_data other_request2@data .req
	} if

	dup $() "other_request2_key" $= {
		public_key contract_data other_request2_key@data .key
	} if

	cr
	1 +
} $# 3 - times
