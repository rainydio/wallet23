#!/bin/env -S fift -s

"Asm.fif" include
"TonUtil.fif" include
"../lib.fif" include

$# 7 < {
	."fift -s " $0 type ." <key1 file> <key2 file> <key3 file> <workchain id> <nonce> <address file> <msg boc file>" cr
	."  create new wallet in <workchain id>" cr
	."  preferred address can be chosen by tweaking <nonce> that is added to StateInit" cr
	."  key files are created if they don't already exist" cr
	."  address (non-bounceable) is saved to <address file>" cr
	."  message is saved to <msg boc file>" cr

	100 halt
} if

$1 load-generate-keypair drop
constant key1_pub

$2 load-generate-keypair drop
constant key2_pub

$3 load-generate-keypair drop
constant key3_pub

$4 parse-int
constant workchain_id

$5 parse-int
constant nonce

$6
constant address_file

$7
constant msg_boc_file

<{
	SETCP0 ACCEPT
	nonce INT
	"../contract.fif" include PUSHREF SETCODE
}>c constant envelope

<b
	1 32 u,
	null nullref,
	key2_pub B,
	key3_pub B,
	key1_pub B,
	null nullref,
b> constant data

<b
	b{0011} s,
	envelope ref,
	data ref,
	dictnew dict,
b> constant stateinit

workchain_id
stateinit hashu
2constant contract_address

<b
	b{1000100} s,
	contract_address addr,
	b{000010} s,
	stateinit <s s,
	b{0} s,
b> constant msg_init

contract_address 7 smca>$ $>B address_file B>file
msg_init 2 boc+>B msg_boc_file B>file

cr
."address:        " contract_address .addr cr
."bounceable:     " contract_address 6 smca>$ type cr
."non-bounceable: " contract_address 7 smca>$ type cr
