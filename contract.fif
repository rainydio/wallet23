"Asm.fif" include

{
	$>B crc16 0x10000 or
} : $>id

0x00000001 constant OP_REPLACE_KEY

33 constant ERR_SEQNO
34 constant ERR_EXP
35 constant ERR_SIG
36 constant ERR_REPLAY
38 constant ERR_KEY_EXISTS
39 constant ERR_KEY_NOT_FOUND
40 constant ERR_OP_UNKNOWN

<{
	SETCP0

	// EXTERNAL MESSAGE HANDLER

	// ifnot(++function_id) cheaper than if(function_id == -1)
	DUP INC <{
		// hash that was signed includes contract address
		OVER
		512 INT LDSLICEX
		DUP MYADDR
		NEWC STSLICE STSLICE ENDC
		HASHCU

		// seqno, valid_until, request|confirmation
		SWAP 32 LDU 32 LDU PLDREF

		// dictionary operations are cheaper than handling missing references
		// with main disadvantage being keys not aligned to bytes
		PUSHROOT
		CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT

		// top 5 stack items (s0...s4) loaded from data are symmetrical
		//
		// s10 signature
		// s9  signed_hash
		// s8  seqno
		// s7  valid_until
		// s6  request|confirmation
		// s5  stored_seqno
		// s4  last_request
		// s3  last_key
		// s2  third_key
		// s1  prev_key
		// s0  prev_request

		// check valid_until, compare seqnos
		s5 s8 s7 PUSH3
		NOW GEQ ERR_EXP THROWIFNOT
		EQUAL ERR_SEQNO THROWIFNOT

		<{
			<{
				// alternative return
				// clear requests
				DROP NULL 4 3 BLKPUSH
				// push incremented seqno on top
				s9 PUSH INC
			}> PUSHCONT SETEXITALT

			// check signature against most likely used prev_key
			s9 s10 s1 PUSH3 CHKSIGNU <{
				// if failed flipping to second most likely used last_key
				5 0 REVERSE
				s9 s10 s1 PUSH3 CHKSIGNU IFRET
				// code below is complex and inefficient, but executed rarely
				// trading its performance for simplicity of the hot path

				// if failed too it must be third_key
				s9 s10 s2 PUSH3 CHKSIGNU ERR_SIG THROWIFNOT

				// flip prev_key back to the top
				5 0 REVERSE
				// if there is no request by prev_key swap third_key with it
				s0 PUSH ISNULL <{ 2 1 REVERSE }> PUSHCONT IFJMP
				// otherwise both last_key and prev_key are waiting confirmations
				// third_key has to swap with key that will *not* be confirmed

				// whatever key and request that may be confirmed will be at the bottom
				s0 PUSH HASHCU s7 PUSH HASHCU EQUAL <{ 5 0 REVERSE }> PUSHCONT IF

				// swap with key at the top in any case if confirmation
				//  ... successful two active keys are in place
				//  ... not successful prev_key is swapped with third_key
				2 1 REVERSE

				// alternative return if not successful
				s4 PUSH HASHCU s7 PUSH HASHCU EQUAL IFNOTRETALT
				// otherwise implicit return
			}> PUSHCONT IFNOT

			// whatever current key and request it previously made are at the top
			// request by another key is at the bottom

			// if there was request by another key
			s4 PUSH ISNULL <{
				// compare with received
				s4 PUSH HASHCU s7 PUSH HASHCU EQUAL IFNOTRET
				// succefull confirmation

				// alternative return if cancellation
				s6 PUSH CTOS SDEMPTY IFRETALT

				// send outbound message
				s6 PUSH 3 INT SENDRAWMSG

				// alternative return
				RETALT
			}> PUSHCONT IFNOT

			// normal return
			// only one request can be stored
			s0 PUSH ISNULL ERR_REPLAY THROWIFNOT
			// swap received request with null
			s6 XCHG0
			// and push seqno on top without incrementing
			s5 PUSH
		}>c CALLREF // cheaper than executing

		// both exits push seqno on top
		// current key and its request are on top now and will be stored near seqno
		// during next execution they will be at the bottom (last_request, last_key)
		NEWC 32 STU STDICT 256 STU 256 STU 256 STU STDICT ENDC
		POPROOT
		ACCEPT
	}> PUSHCONT IFNOTJMP


	// INTERNAL MESSAGE HANDLER

	DUP <{
		// ignore bounced messages
		s2 PUSH CTOS 4 LDU SWAP 1 INT AND IFRET

		// ignore messages not sent by contract itself
		LDMSGADDR DROP MYADDR SDEQ IFNOTRET

		// simple transfer (sent to self) if no op field or it is zero
		OVER 32 LDUQ IFNOTRET OVER ISZERO IFRET

		OVER OP_REPLACE_KEY INT EQUAL <{
			PUSHROOT CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT

			s6 PUSH 256 LDU 256 LDU ENDS

			// s7  stored_seqno
			// s6  last_request
			// s5  last_key
			// s4  third_key
			// s3  prev_key
			// s2  prev_request
			// s1  old_key
			// s0  new_key

			s0 s3 PUSH2 EQUAL ERR_KEY_EXISTS THROWIF
			s0 s4 PUSH2 EQUAL ERR_KEY_EXISTS THROWIF
			s0 s5 PUSH2 EQUAL ERR_KEY_EXISTS THROWIF

			<{
				s1 s3 PUSH2 EQUAL <{ s3 XCHG0 }> PUSHCONT IFJMP
				s1 s4 PUSH2 EQUAL <{ s4 XCHG0 }> PUSHCONT IFJMP
				s1 s5 PUSH2 EQUAL <{ s5 XCHG0 }> PUSHCONT IFJMP
				ERR_KEY_NOT_FOUND THROW
			}> PUSHCONT EXECUTE

			2DROP 6 0 REVERSE
			NEWC 32 STU STDICT 256 STU 256 STU 256 STU STDICT ENDC
			POPROOT
		}> PUSHCONT IFJMP

		ERR_OP_UNKNOWN THROW
	}> PUSHCONT IFNOTJMP


	// METHODS

	DUP "seqno" $>id INT EQUAL <{
		DROP
		PUSHROOT CTOS 32 PLDU
	}> PUSHCONT IFJMP

	DUP "keys" $>id INT EQUAL <{
		DROP
		PUSHROOT CTOS 32 1 + INT SDSKIPFIRST 256 LDU 256 LDU 256 PLDU
		2DUP LEQ <{ SWAP }> PUSHCONT IF ROT
		2DUP LEQ <{ SWAP }> PUSHCONT IF ROTREV
		2DUP GEQ <{ SWAP }> PUSHCONT IF
	}> PUSHCONT IFJMP

	// for every method below:
	// s6 my_key
	// s5 stored_seqno
	// s4 last_request
	// s3 last_key
	// s2 third_key
	// s1 prev_key
	// s0 prev_request

	DUP "my_request" $>id INT EQUAL <{
		DROP
		PUSHROOT
		CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT

		<{
			s6 s3 PUSH2 EQUAL <{ s4 PUSH }> PUSHCONT IFJMP
			s6 s1 PUSH2 EQUAL <{ s0 PUSH }> PUSHCONT IFJMP
			NULL
		}> PUSHCONT EXECUTE

		8 0 REVERSE 7 BLKDROP
	}> PUSHCONT IFJMP

	DUP "other_request1" $>id INT EQUAL <{
		DROP
		PUSHROOT
		CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT

		<{
			s6 s3 PUSH2 EQUAL <{ s0 PUSH }> PUSHCONT IFJMP
			s6 s1 PUSH2 EQUAL <{ s4 PUSH }> PUSHCONT IFJMP
			s6 s2 PUSH2 NEQ <{ NULL }> PUSHCONT IFJMP
			s0 PUSH ISNULL NOT <{ s0 PUSH }> PUSHCONT IFJMP
			s4 PUSH ISNULL NOT <{ s4 PUSH }> PUSHCONT IFJMP
			NULL
		}> PUSHCONT EXECUTE

		8 0 REVERSE 7 BLKDROP
	}> PUSHCONT IFJMP

	DUP "other_request1_key" $>id INT EQUAL <{
		DROP
		PUSHROOT
		CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT

		<{
			s6 s3 PUSH2 EQUAL <{ s1 s0 PUSH2 ISNULL NOT SWAP NULL CONDSEL }> PUSHCONT IFJMP
			s6 s1 PUSH2 EQUAL <{ s3 s4 PUSH2 ISNULL NOT SWAP NULL CONDSEL }> PUSHCONT IFJMP
			s6 s2 PUSH2 NEQ <{ NULL }> PUSHCONT IFJMP
			s0 PUSH ISNULL NOT <{ s1 PUSH }> PUSHCONT IFJMP
			s4 PUSH ISNULL NOT <{ s3 PUSH }> PUSHCONT IFJMP
			NULL
		}> PUSHCONT EXECUTE

		8 0 REVERSE 7 BLKDROP
	}> PUSHCONT IFJMP

	DUP "other_request2" $>id INT EQUAL <{
		DROP
		PUSHROOT
		CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT

		<{
			s6 s2 PUSH2 NEQ <{ NULL }> PUSHCONT IFJMP
			s0 PUSH ISNULL NOT <{ s4 PUSH }> PUSHCONT IFJMP
			NULL
		}> PUSHCONT EXECUTE

		8 0 REVERSE 7 BLKDROP
	}> PUSHCONT IFJMP

	DUP "other_request2_key" $>id INT EQUAL <{
		DROP
		PUSHROOT
		CTOS 32 LDU LDDICT 256 LDU 256 LDU 256 LDU PLDDICT

		<{
			s6 s2 PUSH2 NEQ <{ NULL }> PUSHCONT IFJMP
			s0 PUSH ISNULL NOT <{ s3 PUSH }> PUSHCONT IFJMP
			NULL
		}> PUSHCONT EXECUTE

		8 0 REVERSE 7 BLKDROP
	}> PUSHCONT IFJMP
}>c
